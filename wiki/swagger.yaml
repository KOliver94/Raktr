swagger: "2.0"
info:
  title: Raktr
  description: API description.
  version: 0.0.1
host: api.example.com
basePath: "/api"
tags:
  - name: "Device"
    description: "Everything about devices"
  - name: "CompositeItem"
    description: "Everything about composite items"
  - name: "Rent"
    description: "Everything about rents"
  - name: "Category"
    description: "Everything about categories"
  - name: "Location"
    description: "Everything about locations"
schemes:
  - https
paths:
  /device:
    post:
      tags:
        - "Device"
      summary: "Adds a new device"
      operationId: "createDevice"
      parameters:
        - name: "device"
          in: body
          description: "The new device that will be added to the system"
          schema:
            $ref: '#/definitions/Device'
      responses:
        200:
          description: "Successfully created"
    get:
      tags:
        - "Device"
      summary: "Returns a list of all devices including composite ones."
      operationId: "listDevices"
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Device'
    delete:
      tags:
        - "Device"
      summary: "Deletes a device"
      operationId:  "deleteDevice"
      parameters:
        - name: "device"
          in: body
          description: "The updated device"
          required: true
          schema:
            $ref: '#/definitions/Device'
      responses:
        200:
          description: "successfully deleted"
          schema:
            $ref: '#/definitions/Device'
        400:
          description: "Device with invalid id supplied"
        409:
          description: "The device has been modified before the request and after the last read of the client"
    put:
      tags:
        - "Device"
      summary: "Updates an existing device"
      operationId: "updateDevice"
      parameters:
        - name: "device"
          in: body
          description: "The updated device"
          required: true
          schema:
            $ref: '#/definitions/Device'
      responses:
        200:
          description: "Updated successfully"
        400:
          description: "Device with invalid id supplied"
        404:
          description: "No device data given"
  /device/{deviceId}:
    get:
      tags:
        - "Device"
      summary: "Returns a single device"
      operationId: "getDevice"
      produces:
        - application/json
      parameters:
        - name: "deviceId"
          in: path
          description: "The id of the device you want to access"
          required: true
          type: integer
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Device'
        400:
          description: "Invalid ID supplied"
#  /device/barcode/{barcode}:
#    get:
#      tags:
#        - "Device"
#      summary: "Return a device with given barcode value"
#      operationId: "getDeviceByBarcode"
#      parameters:
#        - name: "barcode"
#          in: path
#          description: "The barcode of the device you want to get"
#          required: true
#          type: string
#      responses:
#        200:
#          description: "Successfully found device"
#          schema:
#            $ref: '#/definitions/Device'
#        400:
#          description: "Device with given barcode not found"

  /composite:
    get:
      tags:
        - "CompositeItem"
      summary: "Returns all composite items"
      operationId: "getAllComposite"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: '#/definitions/CompositeItem'
    post:
      tags:
        - "CompositeItem"
      summary: "Adds a composite item to the system"
      operationId: "addComposite"
      parameters:
        - name: "compositeItem"
          in: body
          required: true
          description: "The composite item you want to add to the system"
          schema:
            $ref: '#/definitions/CompositeItem'
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: '#/definitions/CompositeItem'
    put:
      tags:
        - "CompositeItem"
      summary: "Updates a Composite item"
      operationId: "updateComposite"
      parameters:
        - name: "compositeItem"
          in: body
          required: true
          description: "The composite item you want to update in the system"
          schema:
            $ref: '#/definitions/CompositeItem'
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: '#/definitions/CompositeItem'
        404:
          description: "CompositeItem not found"
    delete:
      tags:
        - "CompositeItem"
      summary: "Deletes a composite item"
      operationId: "deleteComposite"
      parameters:
        - name: "compositeItem"
          in: body
          required: true
          description: "The composite item you want to update in the system"
          schema:
            $ref: '#/definitions/CompositeItem'
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: '#/definitions/CompositeItem'
        404:
          description: "CompositeItem not found"
  /composite/{compositeId}:
    get:
      tags:
        - "CompositeItem"
      summary: "Returns a single composite item with given ID"
      operationId: "getOneComposite"
      parameters:
        - name: "compositeId"
          in: path
          description: "The id of the composite item you want to get"
          required: true
          type: integer
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: '#/definitions/CompositeItem'
        404:
          description: "CompositeItem not found"
    put:
      tags:
        - "CompositeItem"
      summary: "Add device to a composite item"
      operationId: "addDeviceToComposite"
      parameters:
        - name: "compositeId"
          in: path
          description: "The id of the composite item you want to get"
          required: true
          type: integer
        - name: "device"
          in: body
          required: true
          schema:
            $ref: '#/definitions/Device'
          description: "The device you want to update in the rent"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: '#/definitions/CompositeItem'
        404:
          description: "CompositeItem or Device not found"
        409:
          description: "Device already in an other composite item"
    delete:
      tags:
        - "CompositeItem"
      summary: "Deletes a device from a composite item"
      operationId: "deleteDeviceFromComposite"
      parameters:
        - name: "compositeId"
          in: path
          description: "The id of the composite item you want to get"
          required: true
          type: integer
        - name: "device"
          in: body
          required: true
          schema:
            $ref: '#/definitions/Device'
          description: "The device you want to delete from the rent"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: '#/definitions/CompositeItem'
        404:
          description: "CompositeItem not found"

  /scannable/{barcode}:
    get:
      tags:
        - "Device"
        - "CompositeItem"
      summary: "Returns the item with given barcode"
      operationId: "getScannableByBarcode"
      parameters:
        - name: "barcode"
          in: path
          type: string
          required: true
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: '#/definitions/Scannable'
        404:
          description: "No item found with given barcode"

  /rent:
    post:
      tags:
        - "Rent"
      summary: "Adding a new rent"
      description: "Adds the rent, devices included in this request will be ignored!"
      operationId: "newRent"
      parameters:
        - in: body
          name: "rentToAdd"
          required: true
          description: "The rent you want to add"
          schema:
            $ref: '#/definitions/Rent'
      responses:
        201:
          description: "Successfully created rent"
    get:
      tags:
        - "Rent"
      summary: "Returns all rents"
      operationId: "getAllRents"
      produces:
        - application/json
      responses:
        200:
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: '#/definitions/Rent'
        404:
          description: "No rents in the system"
    delete:
      tags:
        - "Rent"
      summary: "Deletes the rent with given id"
      operationId: "deleteRent"
      parameters:
        - name: rent
          in: body
          required: true
          description: "The rent you want to delete"
          schema:
            $ref: '#/definitions/Rent'
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: '#/definitions/Rent'
        400:
          description: "Rent with invalid id supplied"
        409:
          description: "The device has been modified before the request and after the last read of the client"
    put:
      tags:
        - "Rent"
      summary: "Updates an existing rent, if the actBackDate field is not empty, the rent is considered to be back."
      operationId: "updateRent"
      parameters:
        - name: "rent"
          in: body
          required: true
          description: "The updated rent data"
          schema:
            $ref: '#/definitions/Rent'
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Rent with invalid id supplied"
        404:
          description: "No rent data supplied"
  /rent/{rentId}:
    get:
      tags:
        - "Rent"
      summary: "Returns a single rent with given ID"
      operationId: "getRentById"
      parameters:
        - name: "rentId"
          in: path
          required: true
          description: "The id of the rent you want to add the device to"
          type: integer
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: '#/definitions/Rent'
        404:
          description: "Invalid id supplied"
    put:
      tags:
        - "Rent"
      summary: "Adds a device to a rent, if device is in the rent updates it. If 0 quantity is given, the device is removed from the rent"
      operationId: "addDeviceToRent"
      parameters:
        - name: "rentId"
          in: path
          required: true
          description: "The id of the rent you want to add the device to"
          type: integer
        - name: "deviceToAdd"
          in: body
          required: true
          description: "The device you want to add to the rent or update"
          schema:
            $ref: '#/definitions/RentItem'
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: '#/definitions/Rent'
        404:
          description: "Invalid id supplied"
        409:
          description: "Given amount is not available of the given device"
  /rent/pdf/{rentId}:
    post:
      summary: "Renturns a pdf version of the rent"
      tags:
        - "Rent"
      operationId: "getPdf"
      parameters:
        - name: "rentId"
          required: true
          type: integer
          in: path
        - name: "rentPdfRequest"
          required: true
          in: body
          schema:
            $ref: '#/definitions/RentPdfRequest'
      responses:
        200:
          description: "Successful operation, returns the generated pdf"
        404:
          description: "Invalid id supplied"


  /category:
    post:
      tags:
        - "Category"
      summary: "Adds a category"
      operationId: "addCategory"
      parameters:
        - name: "category"
          in: body
          required: true
          description: "The category you want to add"
          schema:
            $ref: '#/definitions/Category'
      responses:
        200:
          description: "Successfully added"
          schema:
            $ref: '#/definitions/Category'
    get:
      tags:
        - "Category"
      summary: "Returns all categories"
      operationId: "getCategories"
      responses:
        200:
          description: "OK"
          schema:
            type: array
            items:
              $ref: '#/definitions/Category'
    put:
      tags:
        - "Category"
      summary: "Updates a category"
      operationId: "updateCategory"
      parameters:
        - name: "category"
          in: body
          required: true
          description: "The category you want to update"
          schema:
            $ref: '#/definitions/Category'
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: '#/definitions/Category'
        404:
          description: "Category not found"
          schema:
            $ref: '#/definitions/Category'
    delete:
      tags:
        - "Category"
      summary: "Deletes a category"
      operationId: "deleteCategory"
      parameters:
        - name: "category"
          in: body
          required: true
          description: "The category you want to delete"
          schema:
            $ref: '#/definitions/Category'
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: '#/definitions/Category'
        404:
          description: "Category not found"
          schema:
            $ref: '#/definitions/Category'

  /location:
    post:
      tags:
        - "Location"
      summary: "Adds a location"
      operationId: "addLocation"
      parameters:
        - name: "location"
          in: body
          required: true
          description: "The location you want to add"
          schema:
            $ref: '#/definitions/Location'
      responses:
        200:
          description: "Successfully added"
          schema:
            $ref: '#/definitions/Location'
    get:
      tags:
        - "Location"
      summary: "Returns all locations"
      operationId: "getLocations"
      responses:
        200:
          description: "OK"
          schema:
            type: array
            items:
              $ref: '#/definitions/Location'
    put:
      tags:
        - "Location"
      summary: "Updates a location"
      operationId: "updateLocation"
      parameters:
        - name: "location"
          in: body
          required: true
          description: "The location you want to update"
          schema:
            $ref: '#/definitions/Location'
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: '#/definitions/Location'
        404:
          description: "Category not found"
          schema:
            $ref: '#/definitions/Location'
    delete:
      tags:
        - "Location"
      summary: "Deletes a location"
      operationId: "deleteLocation"
      parameters:
        - name: "location"
          in: body
          required: true
          description: "The location you want to delete"
          schema:
            $ref: '#/definitions/Location'
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: '#/definitions/Location'
        404:
          description: "Location not found"
          schema:
            $ref: '#/definitions/Location'


definitions:
  Scannable:
    description: "An abstract class for scannable objects"
    type: "object"
    required:
      - name
      - id
    properties:
      id:
        type: integer
      name:
        type: string
        example: "Kamera"
      barcode:
        type: string
        example: "B-320-01"

  Device:
    type: "object"
    allOf:
      - $ref: '#/definitions/Scannable'
    properties:
      maker:
        type: string
        example: "Sony"
      type:
        type: string
        example: "PMW-320"
      value:
        type: integer
      serial:
        type: string
        example: "00001111AABB"
      weight:
        type: integer
        default: 1000
        description: "The weight of the device in grams"
      location:
        $ref: '#/definitions/Location'
      status:
        description: "The status of the device on a scale from 1 to 5"
        type: string
        enum:
          - "GOOD"
          - "NEEDS_REPAIR"
          - "SCRAPPED"
      category:
        $ref: '#/definitions/Category'
      quantity:
        description: "The amount there is of a device"
        type: integer
        default: 1

  CompositeItem:
    type: object
    description: "An item that contains multiple devices"
    allOf:
      - $ref: '#/definitions/Scannable'
    properties:
      location:
        $ref: '#/definitions/Location'
      devices:
        type: array
        items:
          $ref: '#/definitions/Device'

  Location:
    type: object
    description: "A place, where you can store devices"
    required:
      - name
    properties:
      id:
        type: integer
      name:
        type: string
        example: "110"

  Category:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
      name:
        type: string
        example: "videó"

  RentPdfRequest:
    type: object
    required:
      - teamName
      - teamLeaderName
      - renterFullName
      - renterId
    properties:
      teamName:
        type: string
      teamLeaderName:
        type: string
      renterFullName:
        type: string
      renterId:
        type: string

  User:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
      ldapUid:
        type: string
      nickname:
        type: string
      familyName:
        type: string
      givenName:
        type: string
      personalId:
        type: string
      rank:
        type: string
        enum:
          - "Újonc"
          - "Stúdiós-jelölt-jelölt"
          - "Stúdiós-jelölt"
          - "Stúdiós"

  RentItem:
    description: "An object that is used to track inside a rent if an item arrived back or not"
    type: object
    required:
      - device
      - status
    properties:
      scannable:
        $ref: '#/definitions/Scannable'
      backStatus:
        type: string
        enum:
          - "OUT"
          - "BACK"
      outQuantity:
        type: integer
        default: 1
        description: "Specifies how many of a certain item will be rented"

  Rent:
    type: object
    required:
      - destination
      - outDate
      - expBackDate
      - issuer
    properties:
      id:
        type: integer
      destination:
        description: "Where or to who the devices will go out"
        type: string
      issuer:
        description: "The name of the person, who gives out the devices"
        type: string
      outDate:
        type: string
        description: "The date, when the devices will leave the storage"
      expBackDate:
        type: string
        description: "Expected date, when the devices will arrive back"
      actBackDate:
        type: string
        description: "Actual date, when the devices arrived back"
      devices:
        type: array
        items:
          $ref: '#/definitions/RentItem'