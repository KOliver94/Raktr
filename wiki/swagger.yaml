swagger: "2.0"
info:
  title: Raktr
  description: API description.
  version: 0.0.1
host: api.example.com
basePath: "/api"
tags:
  - name: "Device"
    description: "Everything about devices"
  - name: "Rent"
    description: "Everything about rents"
schemes:
  - http
paths:
  /device/new:
    post:
      tags:
        - "Device"
      summary: "Adds a new device"
      operationId: "createDevice"
      parameters:
        - name: "device"
          in: body
          description: "The new device that will be added to the system"
          schema:
            $ref: '#/definitions/Device'
      responses:
        201:
          description: "Successfully created"

  /device/all:
    get:
      tags:
        - "Device"
      summary: "Returns a list of all devices including composite ones."
      operationId: "listDevices"
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Device'
  /device/{deviceId}:
    get:
      tags:
        - "Device"
      summary: "Returns a single device"
      operationId: "getDevice"
      produces:
        - application/json
      parameters:
        - name: "deviceId"
          in: path
          description: "The id of the device you want to access"
          required: true
          type: integer
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Device'
        400:
          description: "Invalid ID supplied"
    delete:
      tags:
        - "Device"
      summary: "Deletes a device"
      operationId:  "deleteDevice"
      parameters:
        - name: "deviceId"
          in: path
          description: "The id of the device you want to delete"
          required: true
          type: integer
      responses:
        200:
          description: "successfully deleted"
          schema:
            $ref: '#/definitions/Device'
        400:
          description: "Invalid id supplied"
        409:
          description: "The device has been modified before the request and after the last read of the client"
    put:
      tags:
        - "Device"
      summary: "Updates an existing device"
      operationId: "updateDevice"
      parameters:
        - name: "deviceId"
          in: path
          description: "The id of the device you want to delete"
          required: true
          type: integer
        - name: "device"
          in: body
          description: "The updated device"
          required: true
          schema:
            $ref: '#/definitions/Device'
      responses:
        200:
          description: "Updated successfully"
        400:
          description: "Invalid id supplied"
        404:
          description: "No device data given"
  /device/{barcode}:
    get:
      tags:
        - "Device"
      summary: "Return a device with given barcode value"
      operationId: "getDeviceByBarcode"
      parameters:
        - name: "barcode"
          in: path
          description: "The barcode of the device you want to get"
          required: true
          type: string
      responses:
        200:
          description: "Successfully found device"
          schema:
            $ref: '#/definitions/Device'
        400:
          description: "Device with given barcode not found"

  /rent/new:
    post:
      tags:
        - "Rent"
      summary: "Adding a new rent"
      operationId: "newRent"
      parameters:
        - in: body
          name: "rentToAdd"
          required: true
          description: "The rent you want to add"
          schema:
            $ref: '#/definitions/Rent'
      responses:
        201:
          description: "Successfully created rent"
  /rent/all:
    get:
      tags:
        - "Rent"
      summary: "Returns all rents"
      operationId: "getAllRents"
      produces:
        - application/json
      responses:
        200:
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: '#/definitions/Rent'
        404:
          description: "No rents in the system"
  /rent/{rentId}:
    get:
      tags:
        - "Rent"
      summary: "returns the rent with the given id"
      operationId: "getRent"
      parameters:
        - name: rentId
          in: path
          required: true
          description: "The id of the rent you want to get"
          type: integer
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: '#/definitions/Rent'
        400:
          description: "Invalid id supplied"
    delete:
      tags:
        - "Rent"
      summary: "Deletes the rent with given id"
      operationId: "deleteRent"
      parameters:
        - name: rentId
          in: path
          required: true
          description: "The id of the rent you want to delete"
          type: integer
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: '#/definitions/Rent'
        400:
          description: "Invalid id supplied"
        409:
          description: "The device has been modified before the request and after the last read of the client"
    put:
      tags:
        - "Rent"
      summary: "Updates an existing rent"
      operationId: "updateRent"
      parameters:
        - name: rentId
          in: path
          required: true
          description: "The id of the rent you want to delete"
          type: integer
        - name: "rent"
          in: body
          required: true
          description: "The updated rent data"
          schema:
            $ref: '#/definitions/Rent'
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Invalid id supplied"
        404:
          description: "No rent data supplied"
  /rent/{rentId}/update/backDate:
    put:
      tags:
        - "Rent"
      summary: "Updates the backDate of the rent with given ID"
      operationId: "updateRentBackDate"
      parameters:
        - name: "rentId"
          in: path
          required: true
          description: "The id of the rent you want to modify"
          type: integer
        - name: "newBackDate"
          in: body
          required: true
          description: "The rent containing the new backDate"
          schema:
            $ref: '#/definitions/Rent'
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: '#/definitions/Rent'
        400:
          description: "Invalid id supplied"
  /rent/{rentId}/add/device:
    put:
      tags:
        - "Rent"
      summary: "Adds a device to a rent"
      operationId: "addDeviceToRent"
      parameters:
        - name: "rentId"
          in: path
          required: true
          description: "The id of the rent you want to modify"
          type: integer
        - name: "deviceToAdd"
          in: body
          required: true
          description: "The device you want to add to the rent"
          schema:
            $ref: '#/definitions/Device'
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: '#/definitions/Rent'
        400:
          description: "Invalid id supplied"
  /rent/{rentId}/update/status:
    put:
      tags:
        - "Rent"
      summary: "Updates the status of the rent with given id"
      operationId: "updateRentStatus"
      parameters:
        - name: "rentId"
          in: path
          required: true
          description: "The id of the rent you want to modify"
          type: integer
        - name: "newStatus"
          in: body
          required: true
          description: "The new status of the rent"
          schema:
            $ref: '#/definitions/DeviceBackStatus'
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: '#/definitions/DeviceBackStatus'
        400:
          description: "Invalid id supplied"




definitions:
  Device:
    type: "object"
    required:
      - name
    properties:
      id:
        type: integer
      name:
        type: string
        example: "Kamera"
      maker:
        type: string
        example: "Sony"
      type:
        type: string
        example: "PMW-320"
      value:
        type: integer
      serial:
        type: string
        example: "00001111AABB"
      barcode:
        type: string
        example: "B-320-01"
      weight:
        type: integer
      location:
        $ref: '#/definitions/Location'
      status:
        description: "The status of the device on a scale from 1 to 5"
        type: integer
      category:
        $ref: '#/definitions/Category'

  CompositeDevice:
    allOf:
      - $ref: '#/definitions/Device'
      - type: object
        properties:
          devices:
            type: array
            items:
              $ref: '#/definitions/Device'

  Location:
    type: object
    description: "A place, where you can store devices"
    required:
      - name
    properties:
      id:
        type: integer
      name:
        type: string
        example: "110"

  Category:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
      name:
        type: string
        example: "videó"

  User:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
      username:
        type: string
      familyName:
        type: string
      givenName:
        type: string
      rank:
        type: string
        enum:
          - "Újonc"
          - "Stúdiós-jelölt-jelölt"
          - "Stúdiós-jelölt"
          - "Stúdiós"

  DeviceBackStatus:
    description: "An object that is used to track inside a rent if a device arrived back or not"
    type: object
    required:
      - device
      - status
    properties:
      device:
        $ref: '#/definitions/Device'
      status:
        type: string
        enum:
          - "out"
          - "back"

  Rent:
    type: object
    required:
      - destination
      - outDate
      - expBackDate
      - issuer
    properties:
      id:
        type: integer
      destination:
        description: "Where or to who the devices will go out"
        type: string
      issuer:
        $ref: '#/definitions/User'
        description: "The person, who gives out the devices"
      outDate:
        type: string
        description: "The date, when the devices will leave the storage"
      expBackDate:
        type: string
        description: "Expected date, when the devices will arrive back"
      actBackDate:
        type: string
        description: "Actual date, when the devices arrived back"
      devices:
        type: array
        items:
          $ref: '#/definitions/DeviceBackStatus'